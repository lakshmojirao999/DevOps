{  
   "AWSTemplateFormatVersion":"2010-09-09",
   "Parameters":{  
      "SplLambdaEMVVeriablePrtr":{  
         "Type":"String",
         "Description":"Select the Lambda Fun. Environment",
         "AllowedValues":[  
            "TEST",
            "QA",
            "PROD"
         ],
         "Default":"TEST"
      },
      "SplPropertyFilePrtr":{  
         "Type":"String",
         "Description":"Name of the Property File Veriable",
         "Default":"message.properties"
      },
      "SplS3ImageBucketPrtr":{  
         "Type":"String",
         "Description":"New S3 Bucket Name",
         "MinLength":"3",
         "MaxLength":"63",
         "AllowedPattern":"^[a-z0-9-]*$",
         "ConstraintDescription":"must only contain lower case letters, numbers and hyphens (-).",
         "Default":"Spl-images-test"
      },
      "SplS3DataBucketPrtr":{  
         "Type":"String",
         "Description":"Code Source S3 Bucket Name",
         "MinLength":"3",
         "MaxLength":"63",
         "AllowedPattern":"^[a-z0-9-]*$",
         "ConstraintDescription":"must only contain lower case letters, numbers and hyphens (-).",
         "Default":"Spl-data"
      },
      "SplLambdaFuncName01Prtr":{  
         "Type":"String",
         "Description":"Name of the First Lambda Function",
         "Default":"ReportWiredownFunction"
      },
      "SplLambdaFuncName02Prtr":{  
         "Type":"String",
         "Description":"Name of the Second Lambda Function",
         "Default":"GetUserReportsFunction"
      },
      "SplLambdaFuncName03Prtr":{  
         "Type":"String",
         "Description":"Name of the Third Lambda Function",
         "Default":"GetAllWiredownReportsFunction"
      },
	  "SplLambdaFuncName04Prtr":{  
         "Type":"String",
         "Description":"Name of the Fourth Lambda Function",
         "Default":"ImageRekognitionFunction"
      },
      "SplAPIGatewayNamePrtr":{  
         "Type":"String",
         "Description":"Name of the API Gateway",
         "ConstraintDescription":"must only contain upper and lower case letters, numbers and hyphens (-) .",
         "Default":"SplApiGateway01"
      },
      "SplAPIGatewayStgPrtr":{  
         "Type":"String",
         "Description":"Stage for API Gateway deployment",
         "AllowedValues":[  
            "SplTest",
            "SplProd"
         ],
         "Default":"SplTest"
      },
      "SplDynamoDBTableNamePrtr":{  
         "Type":"String",
         "Description":"Name of the DynamoDB Table",
         "ConstraintDescription":"must only contain upper and lower case letters, numbers, hyphens (-) and underscores (_) .",
         "AllowedValues":[  
            "SplTestTable01",
            "SplProdTable"
         ],
         "Default":"SplTestTable01"
      },
      "SplLambdaFunc01MemPrtr":{  
         "Type":"Number",
         "Description":"Memory in MB for the First Lambda Function",
         "ConstraintDescription":"must be a numeric value",
         "MinValue":"128",
         "MaxValue":"1536",
         "Default":"512"
      },
      "SplLambdaFunc02MemPrtr":{  
         "Type":"Number",
         "Description":"Memory in MB for the Second Lambda Function",
         "ConstraintDescription":"must be a numeric value",
         "MinValue":"128",
         "MaxValue":"1536",
         "Default":"512"
      },
      "SplLambdaFunc03MemPrtr":{  
         "Type":"Number",
         "Description":"Memory in MB for the Third Lambda Function",
         "ConstraintDescription":"must be a numeric value",
         "MinValue":"128",
         "MaxValue":"1536",
         "Default":"512"
      },
	  "SplLambdaFunc04MemPrtr":{  
         "Type":"Number",
         "Description":"Memory in MB for the Third Lambda Function",
         "ConstraintDescription":"must be a numeric value",
         "MinValue":"128",
         "MaxValue":"1536",
         "Default":"512"
      },
      "SplLambdaFunc01HandlerPrtr":{  
         "Type":"String",
         "Description":"First Lambda Function Handler",
         "AllowedValues":[  
            "com.Spl.wiredown.lambda.handler.ReportWiredownFunctionHandler",
            "com.Spl.wiredown.lambda.handler.GetWiredownFunctionHandler",
            "com.Spl.wiredown.lambda.handler.GetAllWiredownReportsFunctionHandler",
            "com.Spl.wiredown.lambda.handler.ImageRekognitionFunctionHandler"
         ],
         "Default":"com.Spl.wiredown.lambda.handler.ReportWiredownFunctionHandler"
      },
      "SplLambdaFunc02HandlerPrtr":{  
         "Type":"String",
         "Description":"Second Lambda Function Handler",
         "AllowedValues":[  
            "com.Spl.wiredown.lambda.handler.GetWiredownFunctionHandler",
            "com.Spl.wiredown.lambda.handler.ReportWiredownFunctionHandler",
            "com.Spl.wiredown.lambda.handler.GetAllWiredownReportsFunctionHandler",
            "com.Spl.wiredown.lambda.handler.ImageRekognitionFunctionHandler"
         ],
         "Default":"com.Spl.wiredown.lambda.handler.GetWiredownFunctionHandler"
      },
      "SplLambdaFunc03HandlerPrtr":{  
         "Type":"String",
         "Description":"Third Lambda Function Handler",
         "AllowedValues":[  
            "com.Spl.wiredown.lambda.handler.GetWiredownFunctionHandler",
            "com.Spl.wiredown.lambda.handler.ReportWiredownFunctionHandler",
            "com.Spl.wiredown.lambda.handler.GetAllWiredownReportsFunctionHandler",
            "com.Spl.wiredown.lambda.handler.ImageRekognitionFunctionHandler"
         ],
         "Default":"com.Spl.wiredown.lambda.handler.GetAllWiredownReportsFunctionHandler"
      },
	  "SplLambdaFunc04HandlerPrtr":{  
         "Type":"String",
         "Description":"Third Lambda Function Handler",
         "AllowedValues":[  
            "com.Spl.wiredown.lambda.handler.GetWiredownFunctionHandler",
            "com.Spl.wiredown.lambda.handler.ReportWiredownFunctionHandler",
            "com.Spl.wiredown.lambda.handler.GetAllWiredownReportsFunctionHandler",
            "com.Spl.wiredown.lambda.handler.ImageRekognitionFunctionHandler"
         ],
         "Default":"com.Spl.wiredown.lambda.handler.ImageRekognitionFunctionHandler"
      },
      "SplS3BucketKeyPrtr":{  
         "Type":"String",
         "Description":"S3 Key Name or Zip file full path",
         "Default":"report.zip"
      },
      "SplLambdaFunc01RuntimePrtr":{  
         "Type":"String",
         "Description":"First Lambda Function Runtime",
         "AllowedValues":[  
            "nodejs4.3",
            "nodejs6.10",
            "java8",
            "python2.7",
            "python3.6"
         ],
         "ConstraintDescription":"must be nodejs4.3/nodejs6.10/java8/python2.7/python3.6.",
         "Default":"java8"
      },
      "SplLambdaFunc02RuntimePrtr":{  
         "Type":"String",
         "Description":"Second Lambda Function Runtime",
         "AllowedValues":[  
            "nodejs4.3",
            "nodejs6.10",
            "java8",
            "python2.7",
            "python3.6"
         ],
         "ConstraintDescription":"must be nodejs4.3/nodejs6.10/java8/python2.7/python3.6.",
         "Default":"java8"
      },
      "SplLambdaFunc03RuntimePrtr":{  
         "Type":"String",
         "Description":"Third Lambda Function Runtime",
         "AllowedValues":[  
            "nodejs4.3",
            "nodejs6.10",
            "java8",
            "python2.7",
            "python3.6"
         ],
         "ConstraintDescription":"must be nodejs4.3/nodejs6.10/java8/python2.7/python3.6.",
         "Default":"java8"
      },
	  "SplLambdaFunc04RuntimePrtr":{  
         "Type":"String",
         "Description":"Third Lambda Function Runtime",
         "AllowedValues":[  
            "nodejs4.3",
            "nodejs6.10",
            "java8",
            "python2.7",
            "python3.6"
         ],
         "ConstraintDescription":"must be nodejs4.3/nodejs6.10/java8/python2.7/python3.6.",
         "Default":"java8"
      },
      "SplLambdaFunc01TimeoutPrtr":{  
         "Type":"String",
         "Description":"First Lambda Function Timeout in Seconds",
         "MinLength":"1",
         "MaxLength":"3",
         "AllowedPattern":"[0-9]*",
         "ConstraintDescription":"must be a numeric value",
         "Default":"30"
      },
      "SplLambdaFunc02TimeoutPrtr":{  
         "Type":"String",
         "Description":"Second Lambda Function Timeout in Seconds",
         "MinLength":"1",
         "MaxLength":"3",
         "AllowedPattern":"[0-9]*",
         "ConstraintDescription":"must be a numeric value",
         "Default":"30"
      },
      "SplLambdaFunc03TimeoutPrtr":{  
         "Type":"String",
         "Description":"Third Lambda Function Timeout in Seconds",
         "MinLength":"1",
         "MaxLength":"3",
         "AllowedPattern":"[0-9]*",
         "ConstraintDescription":"must be a numeric value",
         "Default":"30"
      },
	  "SplLambdaFunc04TimeoutPrtr":{  
         "Type":"String",
         "Description":"Third Lambda Function Timeout in Seconds",
         "MinLength":"1",
         "MaxLength":"3",
         "AllowedPattern":"[0-9]*",
         "ConstraintDescription":"must be a numeric value",
         "Default":"30"
      },
      "SplServiceRolePrtr":{  
         "Type":"String",
         "Description":"Name of the IAM Role",
         "Default":"TestServiceRole"
      },
      "SplAccountOwnerIDPrtr":{  
         "Type":"String",
         "Description":"Owner Id for the AWS account",
         "Default":"453809356416"
      }
   },
   "Resources":{  
      "S3Bucket":{ 
         "Type":"AWS::S3::Bucket",
         "Properties":{  
            "BucketName":{  
               "Ref":"SplS3ImageBucketPrtr"
            },
			"NotificationConfiguration" : {
			    "LambdaConfigurations" : [{
					"Function" : { "Fn::GetAtt" : ["SplImageRekognitionWiredown", "Arn"] },
					"Event" : "s3:ObjectCreated:Put"
			    }]
			}
         }
      },
      "SplTable":{  
         "Type":"AWS::DynamoDB::Table",
         "Properties":{  
            "TableName":{  
               "Ref":"SplDynamoDBTableNamePrtr"
            },
            "AttributeDefinitions":[  
               {  
                  "AttributeName":"reportId",
                  "AttributeType":"S"
               },
               {  
                  "AttributeName":"reportTimestamp",
                  "AttributeType":"S"
               },
               {  
                  "AttributeName":"deviceId",
                  "AttributeType":"S"
               }
            ],
            "KeySchema":[  
               {  
                  "AttributeName":"reportId",
                  "KeyType":"HASH"
               },
               {  
                  "AttributeName":"reportTimestamp",
                  "KeyType":"RANGE"
               }
            ],
            "GlobalSecondaryIndexes":[  
               {  
                  "IndexName":"deviceId-index",
                  "KeySchema":[  
                     {  
                        "AttributeName":"deviceId",
                        "KeyType":"HASH"
                     }
                  ],
                  "Projection":{  
                     "ProjectionType":"ALL"
                  },
                  "ProvisionedThroughput":{  
                     "ReadCapacityUnits":5,
                     "WriteCapacityUnits":5
                  }
               }
            ],
            "ProvisionedThroughput":{  
               "ReadCapacityUnits":5,
               "WriteCapacityUnits":5
            }
         }
      },
      "WriteCapacityScalableTarget":{  
         "Type":"AWS::ApplicationAutoScaling::ScalableTarget",
         "Properties":{  
            "MaxCapacity":50,
            "MinCapacity":30,
            "ResourceId":{  
               "Fn::Join":[  
                  "/",
                  [  
                     "table",
                     {  
                        "Ref":"SplTable"
                     }
                  ]
               ]
            },
            "RoleARN":{  
               "Fn::GetAtt":[  
                  "SplServiceRole",
                  "Arn"
               ]
            },
            "ScalableDimension":"dynamodb:table:WriteCapacityUnits",
            "ServiceNamespace":"dynamodb"
         }
      },
      "ReadCapacityScalableTarget":{  
         "Type":"AWS::ApplicationAutoScaling::ScalableTarget",
         "Properties":{  
            "MaxCapacity":50,
            "MinCapacity":30,
            "ResourceId":{  
               "Fn::Join":[  
                  "/",
                  [  
                     "table",
                     {  
                        "Ref":"SplTable"
                     }
                  ]
               ]
            },
            "RoleARN":{  
               "Fn::GetAtt":[  
                  "SplServiceRole",
                  "Arn"
               ]
            },
            "ScalableDimension":"dynamodb:table:ReadCapacityUnits",
            "ServiceNamespace":"dynamodb"
         }
      },
      "WriteScalingPolicy":{  
         "Type":"AWS::ApplicationAutoScaling::ScalingPolicy",
         "Properties":{  
            "PolicyName":"WriteAutoScalingPolicy",
            "PolicyType":"TargetTrackingScaling",
            "ScalingTargetId":{  
               "Ref":"WriteCapacityScalableTarget"
            },
            "TargetTrackingScalingPolicyConfiguration":{  
               "TargetValue":70,
               "ScaleInCooldown":60,
               "ScaleOutCooldown":60,
               "PredefinedMetricSpecification":{  
                  "PredefinedMetricType":"DynamoDBWriteCapacityUtilization"
               }
            }
         }
      },
      "ReadScalingPolicy":{  
         "Type":"AWS::ApplicationAutoScaling::ScalingPolicy",
         "Properties":{  
            "PolicyName":"ReadAutoScalingPolicy",
            "PolicyType":"TargetTrackingScaling",
            "ScalingTargetId":{  
               "Ref":"ReadCapacityScalableTarget"
            },
            "TargetTrackingScalingPolicyConfiguration":{  
               "TargetValue":70,
               "ScaleInCooldown":60,
               "ScaleOutCooldown":60,
               "PredefinedMetricSpecification":{  
                  "PredefinedMetricType":"DynamoDBReadCapacityUtilization"
               }
            }
         }
      },
      "SplServiceRole":{  
         "Type":"AWS::IAM::Role",
         "Properties":{  
            "RoleName":{  
               "Ref":"SplServiceRolePrtr"
            },
            "AssumeRolePolicyDocument":{  
               "Version":"2012-10-17",
               "Statement":[  
                  {  
                     "Effect":"Allow",
                     "Principal":{  
                        "Service":[  
                           "lambda.amazonaws.com",
                           "s3.amazonaws.com",
                           "apigateway.amazonaws.com",
                           "dynamodb.application-autoscaling.amazonaws.com",
                           "application-autoscaling.amazonaws.com"
                        ]
                     },
                     "Action":[  
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path":"/",
            "Policies":[  
               {  
                  "PolicyName":{  
                     "Ref":"SplServiceRolePrtr"
                  },
                  "PolicyDocument":{  
                     "Version":"2012-10-17",
                     "Statement":[  
                        {  
                           "Effect":"Allow",
                           "Action":[  
                              "logs:CreateLogGroup",
                              "lambda:InvokeFunction",
                              "logs:CreateLogStream",
                              "logs:PutLogEvents",
                              "s3:*",
                              "dynamodb:*",
                              "cloudwatch:*",
                              "events:*",
                              "logs:*",
                              "logs:CreateLogGroup",
                              "logs:CreateLogStream",
                              "logs:PutLogEvents",
                              "lambda:CreateFunction",
                              "lambda:ListFunctions",
                              "lambda:ListEventSourceMappings",
                              "lambda:CreateEventSourceMapping",
                              "lambda:DeleteEventSourceMapping",
                              "lambda:GetFunctionConfiguration",
                              "lambda:DeleteFunction",
                              "execute-api:Invoke",
                              "xray:PutTraceSegments",
                              "xray:PutTelemetryRecords",
							  "rekognition:DetectModerationLabels"
                           ],
                           "Resource":[  
                              "arn:aws:logs:*:*:*",
                              "arn:aws:execute-api:*:*:*",
                              "*"
                           ]
                        }
                     ]
                  }
               }
            ]
         }
      },
      "Permission01":{  
         "Type":"AWS::Lambda::Permission",
         "Properties":{  
            "FunctionName":{  
               "Fn::GetAtt":[  
                  "SplLambdaReportWiredown",
                  "Arn"
               ]
            },
            "Action":"lambda:InvokeFunction",
            "Principal":"apigateway.amazonaws.com",
            "SourceArn":{  
               "Fn::Join":[  
                  "",
                  [  
                     "arn:aws:execute-api:",
                     {  
                        "Ref":"AWS::Region"
                     },
                     ":",
                     {  
                        "Ref":"AWS::AccountId"
                     },
                     ":",
                     {  
                        "Ref":"SplApiGateway"
                     },
                     "/*/*/*"
                  ]
               ]
            }
         }
      },
      "Permission02":{  
         "Type":"AWS::Lambda::Permission",
         "Properties":{  
            "FunctionName":{  
               "Fn::GetAtt":[  
                  "SplUserReportWiredown",
                  "Arn"
               ]
            },
            "Action":"lambda:InvokeFunction",
            "Principal":"apigateway.amazonaws.com",
            "SourceArn":{  
               "Fn::Join":[  
                  "",
                  [  
                     "arn:aws:execute-api:",
                     {  
                        "Ref":"AWS::Region"
                     },
                     ":",
                     {  
                        "Ref":"AWS::AccountId"
                     },
                     ":",
                     {  
                        "Ref":"SplApiGateway"
                     },
                     "/*/*/*"
                  ]
               ]
            }
         }
      },
      "Permission03":{  
         "Type":"AWS::Lambda::Permission",
         "Properties":{  
            "FunctionName":{  
               "Fn::GetAtt":[  
                  "SplAllReportWiredown",
                  "Arn"
               ]
            },
            "Action":"lambda:InvokeFunction",
            "Principal":"apigateway.amazonaws.com",
            "SourceArn":{  
               "Fn::Join":[  
                  "",
                  [  
                     "arn:aws:execute-api:",
                     {  
                        "Ref":"AWS::Region"
                     },
                     ":",
                     {  
                        "Ref":"AWS::AccountId"
                     },
                     ":",
                     {  
                        "Ref":"SplApiGateway"
                     },
                     "/*/*/*"
                  ]
               ]
            }
         }
      },
	  "Permission04":{
		"Type" : "AWS::Lambda::Permission",
		"Properties" : {
			"Action" : "lambda:InvokeFunction",
			"FunctionName" : { "Fn::GetAtt" : ["SplImageRekognitionWiredown", "Arn"] },
			"Principal" : "s3.amazonaws.com",
			"SourceArn": {
				"Fn::GetAtt": [
					"S3Bucket",
					"Arn"
				]
			} 
		}
	  },
      "SplLambdaReportWiredown":{  
         "Type":"AWS::Lambda::Function",
         "Properties":{  
            "Handler":{  
               "Ref":"SplLambdaFunc01HandlerPrtr"
            },
            "Role":{  
               "Fn::GetAtt":[  
                  "SplServiceRole",
                  "Arn"
               ]
            },
            "Code":{  
               "S3Bucket":{  
                  "Ref":"SplS3DataBucketPrtr"
               },
               "S3Key":{  
                  "Ref":"SplS3BucketKeyPrtr"
               }
            },
            "Runtime":{  
               "Ref":"SplLambdaFunc01RuntimePrtr"
            },
            "MemorySize":{  
               "Ref":"SplLambdaFunc01MemPrtr"
            },
            "Environment":{  
               "Variables":{  
                  "ENV":{  
                     "Ref":"SplLambdaEMVVeriablePrtr"
                  },
                  "S3DataBucket":{  
                     "Ref":"SplS3DataBucketPrtr"
                  },
                  "S3ImageBucket":{  
                     "Ref":"SplS3ImageBucketPrtr"
                  },
                  "propertiesFile":{  
                     "Ref":"SplPropertyFilePrtr"
                  },
                  "reportTable":"ReportWiredown"
               }
            },
            "FunctionName": {"Fn::Join": ["",[{"Ref": "SplLambdaEMVVeriablePrtr"},"_",{"Ref": "SplLambdaFuncName01Prtr"}]]},
            "Timeout":{  
               "Ref":"SplLambdaFunc01TimeoutPrtr"
            }
         }
      },
      "SplUserReportWiredown":{  
         "Type":"AWS::Lambda::Function",
         "Properties":{  
            "Handler":{  
               "Ref":"SplLambdaFunc02HandlerPrtr"
            },
            "Role":{  
               "Fn::GetAtt":[  
                  "SplServiceRole",
                  "Arn"
               ]
            },
            "Code":{  
               "S3Bucket":{  
                  "Ref":"SplS3DataBucketPrtr"
               },
               "S3Key":{  
                  "Ref":"SplS3BucketKeyPrtr"
               }
            },
            "Runtime":{  
               "Ref":"SplLambdaFunc02RuntimePrtr"
            },
            "Environment":{  
               "Variables":{  
                  "ENV":{  
                     "Ref":"SplLambdaEMVVeriablePrtr"
                  },
                  "S3DataBucket":{  
                     "Ref":"SplS3DataBucketPrtr"
                  },
                  "S3ImageBucket":{  
                     "Ref":"SplS3ImageBucketPrtr"
                  },
                  "propertiesFile":{  
                     "Ref":"SplPropertyFilePrtr"
                  },
                  "reportTable":"ReportWiredown"
               }
            },
            "MemorySize":{  
               "Ref":"SplLambdaFunc02MemPrtr"
            },
			 "FunctionName": {"Fn::Join": ["",[{"Ref": "SplLambdaEMVVeriablePrtr"},"_",{"Ref": "SplLambdaFuncName02Prtr"}]]},
            "Timeout":{  
               "Ref":"SplLambdaFunc02TimeoutPrtr"
            }
         }
      },
      "SplAllReportWiredown":{  
         "Type":"AWS::Lambda::Function",
         "Properties":{  
            "Handler":{  
               "Ref":"SplLambdaFunc03HandlerPrtr"
            },
            "Role":{  
               "Fn::GetAtt":[  
                  "SplServiceRole",
                  "Arn"
               ]
            },
            "Code":{  
               "S3Bucket":{  
                  "Ref":"SplS3DataBucketPrtr"
               },
               "S3Key":{  
                  "Ref":"SplS3BucketKeyPrtr"
               }
            },
            "Runtime":{  
               "Ref":"SplLambdaFunc03RuntimePrtr"
            },
            "Environment":{  
               "Variables":{  
                  "ENV":{  
                     "Ref":"SplLambdaEMVVeriablePrtr"
                  },
                  "S3DataBucket":{  
                     "Ref":"SplS3DataBucketPrtr"
                  },
                  "S3ImageBucket":{  
                     "Ref":"SplS3ImageBucketPrtr"
                  },
                  "propertiesFile":{  
                     "Ref":"SplPropertyFilePrtr"
                  },
                  "reportTable":"ReportWiredown"
               }
            },
            "MemorySize":{  
               "Ref":"SplLambdaFunc03MemPrtr"
            },
             "FunctionName": {"Fn::Join": ["",[{"Ref": "SplLambdaEMVVeriablePrtr"},"_",{"Ref": "SplLambdaFuncName03Prtr"}]]},
            "Timeout":{  
               "Ref":"SplLambdaFunc03TimeoutPrtr"
            }
         }
      },
	  "SplImageRekognitionWiredown":{  
         "Type":"AWS::Lambda::Function",
         "Properties":{  
            "Handler":{  
               "Ref":"SplLambdaFunc04HandlerPrtr"
            },
            "Role":{  
               "Fn::GetAtt":[  
                  "SplServiceRole",
                  "Arn"
               ]
            },
            "Code":{  
               "S3Bucket":{  
                  "Ref":"SplS3DataBucketPrtr"
               },
               "S3Key":{  
                  "Ref":"SplS3BucketKeyPrtr"
               }
            },
            "Runtime":{  
               "Ref":"SplLambdaFunc04RuntimePrtr"
            },
            "Environment":{  
               "Variables":{  
                  "ENV":{  
                     "Ref":"SplLambdaEMVVeriablePrtr"
                  },
                  "S3DataBucket":{  
                     "Ref":"SplS3DataBucketPrtr"
                  },
                  "S3ImageBucket":{  
                     "Ref":"SplS3ImageBucketPrtr"
                  },
                  "propertiesFile":{  
                     "Ref":"SplPropertyFilePrtr"
                  },
                  "reportTable":"ReportWiredown"
               }
            },
            "MemorySize":{  
               "Ref":"SplLambdaFunc04MemPrtr"
            },
             "FunctionName": {"Fn::Join": ["",[{"Ref": "SplLambdaEMVVeriablePrtr"},"_",{"Ref": "SplLambdaFuncName04Prtr"}]]},
            "Timeout":{  
               "Ref":"SplLambdaFunc04TimeoutPrtr"
            }
         }
      },
      "SplApiGateway":{  
         "Type":"AWS::ApiGateway::RestApi",
         "Properties":{  
            "Name":{  
               "Ref":"SplAPIGatewayNamePrtr"
            },
            "Body":{  
               "swagger":"2.0",
               "info":{  
                  "version":"2018-05-07T06:08:39Z",
                  "title":{  
                     "Ref":"SplAPIGatewayNamePrtr"
                  }
               },
               "basePath":{  
                  "Ref":"SplAPIGatewayStgPrtr"
               },
               "schemes":[  
                  "https"
               ],
               "paths":{  
                  "/getuserreport":{  
                     "post":{  
                        "consumes":[  
                           "application/json"
                        ],
                        "produces":[  
                           "application/json"
                        ],
                        "responses":{  
                           "200":{  
                              "description":"200 response",
                              "schema":{  
                                 "$ref":"#/definitions/Empty"
                              }
                           }
                        },
                        "security":[  
                           {  
                              "api_key":[  

                              ]
                           }
                        ],
                        "x-amazon-apigateway-integration":{  
                           "uri":{  
                              "Fn::Join":[  
                                 "",
                                 [  
                                    "arn:aws:apigateway:",
                                    {  
                                       "Ref":"AWS::Region"
                                    },
                                    ":lambda:path/2015-03-31/functions/",
                                    {  
                                       "Fn::GetAtt":[  
                                          "SplUserReportWiredown",
                                          "Arn"
                                       ]
                                    },
                                    "/invocations"
                                 ]
                              ]
                           },
                           "responses":{  
                              "default":{  
                                 "statusCode":"200"
                              }
                           },
                           "passthroughBehavior":"when_no_match",
                           "httpMethod":"POST",
                           "requestTemplates":{  
                              "application/json":"{\r\n    \"deviceId\": $input.json('$.deviceId')\r\n}"
                           },
                           "contentHandling":"CONVERT_TO_TEXT",
                           "type":"aws"
                        }
                     }
                  },
                  "/getallreport":{  
                     "post":{  
                        "consumes":[  
                           "application/json"
                        ],
                        "produces":[  
                           "application/json"
                        ],
                        "responses":{  
                           "200":{  
                              "description":"200 response",
                              "schema":{  
                                 "$ref":"#/definitions/Empty"
                              }
                           }
                        },
                        "security":[  
                           {  
                              "api_key":[  

                              ]
                           }
                        ],
                        "x-amazon-apigateway-integration":{  
                           "uri":{  
                              "Fn::Join":[  
                                 "",
                                 [  
                                    "arn:aws:apigateway:",
                                    {  
                                       "Ref":"AWS::Region"
                                    },
                                    ":lambda:path/2015-03-31/functions/",
                                    {  
                                       "Fn::GetAtt":[  
                                          "SplAllReportWiredown",
                                          "Arn"
                                       ]
                                    },
                                    "/invocations"
                                 ]
                              ]
                           },
                           "responses":{  
                              "default":{  
                                 "statusCode":"200"
                              }
                           },
                           "passthroughBehavior":"when_no_match",
                           "httpMethod":"POST",
                           "requestTemplates":{  
                              "application/json":"{\r\n    \"reportsStartTime\": $input.json('$.reportsStartTime'),\r\n    \"reportsEndTime\": $input.json('$.reportsEndTime'),\r\n\t\"start\": $input.json('$.start'),\r\n\t\"end\": $input.json('$.end')\r\n}"
                           },
                           "contentHandling":"CONVERT_TO_TEXT",
                           "type":"aws"
                        }
                     }
                  },
                  "/reportwiredown":{  
                     "post":{  
                        "consumes":[  
                           "application/json"
                        ],
                        "produces":[  
                           "application/json"
                        ],
                        "responses":{  
                           "200":{  
                              "description":"200 response",
                              "schema":{  
                                 "$ref":"#/definitions/Empty"
                              }
                           }
                        },
                        "security":[  
                           {  
                              "api_key":[  

                              ]
                           }
                        ],
                        "x-amazon-apigateway-integration":{  
                           "uri":{  
                              "Fn::Join":[  
                                 "",
                                 [  
                                    "arn:aws:apigateway:",
                                    {  
                                       "Ref":"AWS::Region"
                                    },
                                    ":lambda:path/2015-03-31/functions/",
                                    {  
                                       "Fn::GetAtt":[  
                                          "SplLambdaReportWiredown",
                                          "Arn"
                                       ]
                                    },
                                    "/invocations"
                                 ]
                              ]
                           },
                           "responses":{  
                              "default":{  
                                 "statusCode":"200"
                              }
                           },
                           "passthroughBehavior":"when_no_match",
                           "httpMethod":"POST",
                           "requestTemplates":{  
                              "application/json":"{\r\n    \"deviceId\": $input.json('$.deviceId'),\r\n    \"userId\": $input.json('$.userId'),\r\n    \"latitude\": $input.json('$.latitude'),\r\n    \"longitude\": $input.json('$.longitude'),\r\n    \"addressLine1\": $input.json('$.addressLine1'),\r\n    \"addressLine2\": $input.json('$.addressLine2'),\r\n    \"city\": $input.json('$.city'),\r\n    \"state\": $input.json('$.state'),\r\n    \"zip\": $input.json('$.zip'),\r\n    \"imageuploadEnable\" : $input.json('$.imageuploadEnable'),\r\n\t\"que1\": $input.json('$.que1'),\r\n\t\"ans1\": $input.json('$.ans1'),\r\n\t\"que2\": $input.json('$.que2'),\r\n\t\"ans2\": $input.json('$.ans2'),\r\n\t\"details\": $input.json('$.details')\r\n}"
                           },
                           "contentHandling":"CONVERT_TO_TEXT",
                           "type":"aws"
                        }
                     }
                  }
               },
               "securityDefinitions":{  
                  "api_key":{  
                     "type":"apiKey",
                     "name":"x-api-key",
                     "in":"header"
                  }
               },
               "definitions":{  
                  "Empty":{  
                     "type":"object",
                     "title":"Empty Schema"
                  }
               }
            }
         }
		 },
         "SplApiDeployment":{  
            "Type":"AWS::ApiGateway::Deployment",
            "Properties":{  
               "RestApiId":{  
                  "Ref":"SplApiGateway"
               },
               "Description":"Wiredown Deployment"
            }
         },
         "SplApiStage":{  
            "Type":"AWS::ApiGateway::Stage",
            "Properties":{  
               "DeploymentId":{  
                  "Ref":"SplApiDeployment"
               },
               "RestApiId":{  
                  "Ref":"SplApiGateway"
               },
               "StageName":{  
                  "Ref":"SplAPIGatewayStgPrtr"
               }
            }
         },
        "SplUsagePlan":{  
            "Type":"AWS::ApiGateway::UsagePlan",
            "Properties":{  
               "ApiStages":[  
                  {  
                     "ApiId":{  
                        "Ref":"SplApiGateway"
                     },
                     "Stage":{  
                        "Ref":"SplApiStage"
                     }
                  }
               ],
               "Quota":{  
                  "Limit":50000,
                  "Period":"MONTH"
               },
               "Throttle":{  
                  "BurstLimit":2000,
                  "RateLimit":1200
               },
               "UsagePlanName": {"Fn::Join":["",["SplUsagePlan-",{"Ref":"SplLambdaEMVVeriablePrtr"}]]}
            }
         },
         "SplUsagePlanKey":{  
            "Type":"AWS::ApiGateway::UsagePlanKey",
            "Properties":{  
               "KeyId":"yeh3f2ky37",
               "KeyType":"API_KEY",
               "UsagePlanId":{  
                  "Ref":"SplUsagePlan"
               }
            }
         }
      }
   }
